/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package titan.ccp.model.records;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AggregatedActivePowerRecordAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3279045150145386128L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AggregatedActivePowerRecordAvro\",\"namespace\":\"titan.ccp.model.records\",\"fields\":[{\"name\":\"identifier\",\"type\":\"string\",\"doc\":\"*\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"*\"},{\"name\":\"minInW\",\"type\":\"double\",\"doc\":\"*\"},{\"name\":\"maxInW\",\"type\":\"double\",\"doc\":\"*\"},{\"name\":\"count\",\"type\":\"long\",\"doc\":\"*\"},{\"name\":\"sumInW\",\"type\":\"double\",\"doc\":\"*\"},{\"name\":\"averageInW\",\"type\":\"double\",\"doc\":\"*\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<AggregatedActivePowerRecordAvro> ENCODER =
      new BinaryMessageEncoder<AggregatedActivePowerRecordAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AggregatedActivePowerRecordAvro> DECODER =
      new BinaryMessageDecoder<AggregatedActivePowerRecordAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AggregatedActivePowerRecordAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AggregatedActivePowerRecordAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AggregatedActivePowerRecordAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AggregatedActivePowerRecordAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AggregatedActivePowerRecordAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AggregatedActivePowerRecordAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AggregatedActivePowerRecordAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AggregatedActivePowerRecordAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** * */
   private java.lang.CharSequence identifier;
  /** * */
   private java.time.Instant timestamp;
  /** * */
   private double minInW;
  /** * */
   private double maxInW;
  /** * */
   private long count;
  /** * */
   private double sumInW;
  /** * */
   private double averageInW;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AggregatedActivePowerRecordAvro() {}

  /**
   * All-args constructor.
   * @param identifier *
   * @param timestamp *
   * @param minInW *
   * @param maxInW *
   * @param count *
   * @param sumInW *
   * @param averageInW *
   */
  public AggregatedActivePowerRecordAvro(java.lang.CharSequence identifier, java.time.Instant timestamp, java.lang.Double minInW, java.lang.Double maxInW, java.lang.Long count, java.lang.Double sumInW, java.lang.Double averageInW) {
    this.identifier = identifier;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.minInW = minInW;
    this.maxInW = maxInW;
    this.count = count;
    this.sumInW = sumInW;
    this.averageInW = averageInW;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return identifier;
    case 1: return timestamp;
    case 2: return minInW;
    case 3: return maxInW;
    case 4: return count;
    case 5: return sumInW;
    case 6: return averageInW;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: identifier = (java.lang.CharSequence)value$; break;
    case 1: timestamp = (java.time.Instant)value$; break;
    case 2: minInW = (java.lang.Double)value$; break;
    case 3: maxInW = (java.lang.Double)value$; break;
    case 4: count = (java.lang.Long)value$; break;
    case 5: sumInW = (java.lang.Double)value$; break;
    case 6: averageInW = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'identifier' field.
   * @return *
   */
  public java.lang.CharSequence getIdentifier() {
    return identifier;
  }


  /**
   * Sets the value of the 'identifier' field.
   * *
   * @param value the value to set.
   */
  public void setIdentifier(java.lang.CharSequence value) {
    this.identifier = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return *
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * *
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'minInW' field.
   * @return *
   */
  public double getMinInW() {
    return minInW;
  }


  /**
   * Sets the value of the 'minInW' field.
   * *
   * @param value the value to set.
   */
  public void setMinInW(double value) {
    this.minInW = value;
  }

  /**
   * Gets the value of the 'maxInW' field.
   * @return *
   */
  public double getMaxInW() {
    return maxInW;
  }


  /**
   * Sets the value of the 'maxInW' field.
   * *
   * @param value the value to set.
   */
  public void setMaxInW(double value) {
    this.maxInW = value;
  }

  /**
   * Gets the value of the 'count' field.
   * @return *
   */
  public long getCount() {
    return count;
  }


  /**
   * Sets the value of the 'count' field.
   * *
   * @param value the value to set.
   */
  public void setCount(long value) {
    this.count = value;
  }

  /**
   * Gets the value of the 'sumInW' field.
   * @return *
   */
  public double getSumInW() {
    return sumInW;
  }


  /**
   * Sets the value of the 'sumInW' field.
   * *
   * @param value the value to set.
   */
  public void setSumInW(double value) {
    this.sumInW = value;
  }

  /**
   * Gets the value of the 'averageInW' field.
   * @return *
   */
  public double getAverageInW() {
    return averageInW;
  }


  /**
   * Sets the value of the 'averageInW' field.
   * *
   * @param value the value to set.
   */
  public void setAverageInW(double value) {
    this.averageInW = value;
  }

  /**
   * Creates a new AggregatedActivePowerRecordAvro RecordBuilder.
   * @return A new AggregatedActivePowerRecordAvro RecordBuilder
   */
  public static titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder newBuilder() {
    return new titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder();
  }

  /**
   * Creates a new AggregatedActivePowerRecordAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AggregatedActivePowerRecordAvro RecordBuilder
   */
  public static titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder newBuilder(titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder other) {
    if (other == null) {
      return new titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder();
    } else {
      return new titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder(other);
    }
  }

  /**
   * Creates a new AggregatedActivePowerRecordAvro RecordBuilder by copying an existing AggregatedActivePowerRecordAvro instance.
   * @param other The existing instance to copy.
   * @return A new AggregatedActivePowerRecordAvro RecordBuilder
   */
  public static titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder newBuilder(titan.ccp.model.records.AggregatedActivePowerRecordAvro other) {
    if (other == null) {
      return new titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder();
    } else {
      return new titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for AggregatedActivePowerRecordAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AggregatedActivePowerRecordAvro>
    implements org.apache.avro.data.RecordBuilder<AggregatedActivePowerRecordAvro> {

    /** * */
    private java.lang.CharSequence identifier;
    /** * */
    private java.time.Instant timestamp;
    /** * */
    private double minInW;
    /** * */
    private double maxInW;
    /** * */
    private long count;
    /** * */
    private double sumInW;
    /** * */
    private double averageInW;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.identifier)) {
        this.identifier = data().deepCopy(fields()[0].schema(), other.identifier);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.minInW)) {
        this.minInW = data().deepCopy(fields()[2].schema(), other.minInW);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.maxInW)) {
        this.maxInW = data().deepCopy(fields()[3].schema(), other.maxInW);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.count)) {
        this.count = data().deepCopy(fields()[4].schema(), other.count);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.sumInW)) {
        this.sumInW = data().deepCopy(fields()[5].schema(), other.sumInW);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.averageInW)) {
        this.averageInW = data().deepCopy(fields()[6].schema(), other.averageInW);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing AggregatedActivePowerRecordAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(titan.ccp.model.records.AggregatedActivePowerRecordAvro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.identifier)) {
        this.identifier = data().deepCopy(fields()[0].schema(), other.identifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.minInW)) {
        this.minInW = data().deepCopy(fields()[2].schema(), other.minInW);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.maxInW)) {
        this.maxInW = data().deepCopy(fields()[3].schema(), other.maxInW);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.count)) {
        this.count = data().deepCopy(fields()[4].schema(), other.count);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sumInW)) {
        this.sumInW = data().deepCopy(fields()[5].schema(), other.sumInW);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.averageInW)) {
        this.averageInW = data().deepCopy(fields()[6].schema(), other.averageInW);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'identifier' field.
      * *
      * @return The value.
      */
    public java.lang.CharSequence getIdentifier() {
      return identifier;
    }


    /**
      * Sets the value of the 'identifier' field.
      * *
      * @param value The value of 'identifier'.
      * @return This builder.
      */
    public titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder setIdentifier(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.identifier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'identifier' field has been set.
      * *
      * @return True if the 'identifier' field has been set, false otherwise.
      */
    public boolean hasIdentifier() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'identifier' field.
      * *
      * @return This builder.
      */
    public titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder clearIdentifier() {
      identifier = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * *
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * *
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[1], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * *
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * *
      * @return This builder.
      */
    public titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'minInW' field.
      * *
      * @return The value.
      */
    public double getMinInW() {
      return minInW;
    }


    /**
      * Sets the value of the 'minInW' field.
      * *
      * @param value The value of 'minInW'.
      * @return This builder.
      */
    public titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder setMinInW(double value) {
      validate(fields()[2], value);
      this.minInW = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'minInW' field has been set.
      * *
      * @return True if the 'minInW' field has been set, false otherwise.
      */
    public boolean hasMinInW() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'minInW' field.
      * *
      * @return This builder.
      */
    public titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder clearMinInW() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'maxInW' field.
      * *
      * @return The value.
      */
    public double getMaxInW() {
      return maxInW;
    }


    /**
      * Sets the value of the 'maxInW' field.
      * *
      * @param value The value of 'maxInW'.
      * @return This builder.
      */
    public titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder setMaxInW(double value) {
      validate(fields()[3], value);
      this.maxInW = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'maxInW' field has been set.
      * *
      * @return True if the 'maxInW' field has been set, false otherwise.
      */
    public boolean hasMaxInW() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'maxInW' field.
      * *
      * @return This builder.
      */
    public titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder clearMaxInW() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'count' field.
      * *
      * @return The value.
      */
    public long getCount() {
      return count;
    }


    /**
      * Sets the value of the 'count' field.
      * *
      * @param value The value of 'count'.
      * @return This builder.
      */
    public titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder setCount(long value) {
      validate(fields()[4], value);
      this.count = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'count' field has been set.
      * *
      * @return True if the 'count' field has been set, false otherwise.
      */
    public boolean hasCount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'count' field.
      * *
      * @return This builder.
      */
    public titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder clearCount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'sumInW' field.
      * *
      * @return The value.
      */
    public double getSumInW() {
      return sumInW;
    }


    /**
      * Sets the value of the 'sumInW' field.
      * *
      * @param value The value of 'sumInW'.
      * @return This builder.
      */
    public titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder setSumInW(double value) {
      validate(fields()[5], value);
      this.sumInW = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'sumInW' field has been set.
      * *
      * @return True if the 'sumInW' field has been set, false otherwise.
      */
    public boolean hasSumInW() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'sumInW' field.
      * *
      * @return This builder.
      */
    public titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder clearSumInW() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'averageInW' field.
      * *
      * @return The value.
      */
    public double getAverageInW() {
      return averageInW;
    }


    /**
      * Sets the value of the 'averageInW' field.
      * *
      * @param value The value of 'averageInW'.
      * @return This builder.
      */
    public titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder setAverageInW(double value) {
      validate(fields()[6], value);
      this.averageInW = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'averageInW' field has been set.
      * *
      * @return True if the 'averageInW' field has been set, false otherwise.
      */
    public boolean hasAverageInW() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'averageInW' field.
      * *
      * @return This builder.
      */
    public titan.ccp.model.records.AggregatedActivePowerRecordAvro.Builder clearAverageInW() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AggregatedActivePowerRecordAvro build() {
      try {
        AggregatedActivePowerRecordAvro record = new AggregatedActivePowerRecordAvro();
        record.identifier = fieldSetFlags()[0] ? this.identifier : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.time.Instant) defaultValue(fields()[1]);
        record.minInW = fieldSetFlags()[2] ? this.minInW : (java.lang.Double) defaultValue(fields()[2]);
        record.maxInW = fieldSetFlags()[3] ? this.maxInW : (java.lang.Double) defaultValue(fields()[3]);
        record.count = fieldSetFlags()[4] ? this.count : (java.lang.Long) defaultValue(fields()[4]);
        record.sumInW = fieldSetFlags()[5] ? this.sumInW : (java.lang.Double) defaultValue(fields()[5]);
        record.averageInW = fieldSetFlags()[6] ? this.averageInW : (java.lang.Double) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AggregatedActivePowerRecordAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<AggregatedActivePowerRecordAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AggregatedActivePowerRecordAvro>
    READER$ = (org.apache.avro.io.DatumReader<AggregatedActivePowerRecordAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










