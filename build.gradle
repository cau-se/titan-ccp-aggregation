buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
}

plugins {
  id "com.github.spotbugs" version "4.5.1"
}

apply plugin: 'application'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'eclipse'


sourceCompatibility = "1.11"
targetCompatibility = "1.11"

configurations.all {
  // Check for updates every build
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

allprojects {
  repositories {
	jcenter()
	maven {
      url "https://oss.sonatype.org/content/repositories/snapshots/"
	}
    maven {
      url 'https://packages.confluent.io/maven/'
    }
  }
}

dependencies {
  implementation('org.industrial-devops:titan-ccp-common:0.1.0-SNAPSHOT') { changing = true }
  implementation('org.industrial-devops:titan-ccp-common-kafka:0.1.0-SNAPSHOT') { changing = true }
  implementation 'org.apache.kafka:kafka-streams:2.6.0'
  implementation 'com.google.guava:guava:20.0'
  implementation 'org.slf4j:slf4j-simple:1.7.25'

  // Use JUnit test framework
  testImplementation 'junit:junit:4.12'
  testImplementation 'com.github.stefanbirkner:system-rules:1.17.0'
  testImplementation 'org.apache.kafka:kafka-streams-test-utils:2.6.0'
  testImplementation('io.confluent:kafka-streams-avro-serde:5.5.1')  {
      // exclude, because introduces older version with higher number 5.5.1-ccs
      exclude group: 'org.apache.kafka', module: 'kafka-clients'
    }
}

mainClassName = "titan.ccp.aggregation.AggregationService"

pmd {
  ruleSets = [] // Gradle requires to clean the rule sets first
  ruleSetFiles = files("config/pmd.xml")
  ignoreFailures = false
  toolVersion = "6.7.0"
}

checkstyle {
  configDirectory = file("config")
  configFile = file("config/checkstyle.xml")
  maxWarnings = 0
  ignoreFailures = false
  toolVersion = "8.12"
}

spotbugs {
  excludeFilter = file("config/spotbugs-exclude-filter.xml")
  reportLevel = "low"
  effort = "max"
  ignoreFailures = false
  toolVersion = '4.1.3'
}

// Per default XML reports for SpotBugs are generated
// Include this to generate HTML reports
tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
  reports {
    // Either HTML or XML reports can be activated
    html.enabled true
    xml.enabled false
  }
}

task checkstyle {
  group 'Quality Assurance'
  description 'Run Checkstyle'

  dependsOn 'checkstyleMain'
  dependsOn 'checkstyleTest'
}

task pmd {
  group 'Quality Assurance'
  description 'Run PMD'

  dependsOn 'pmdMain'
  dependsOn 'pmdTest'
}

task spotbugs {
  group 'Quality Assurance'
  description 'Run SpotBugs'

  dependsOn 'spotbugsMain'
  dependsOn 'spotbugsTest'
}

eclipse {
  classpath {
    downloadSources=true
    downloadJavadoc=true
  }
}
